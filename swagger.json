{
  "openapi": "3.0.0",
  "info": {
    "title": "Gemini Vector Search API",
    "description": "Vector search system based on Google Gemini 1.5 Flash model, providing document management, vector retrieval and intelligent Q&A capabilities",
    "version": "1.0.0",
    "contact": {
      "name": "API Support Team"
    }
  },
  "servers": [
    {
      "url": "http://35.246.2.155:8000/api/v1",
      "description": "Main Server"
    }
  ],
  "components": {
    "schemas": {
      "EmbeddingRequest": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content for generating embedding vector",
            "example": "Vector search refers to finding documents in a high-dimensional vector space that are closest to the query vector based on similarity"
          }
        }
      },
      "EmbeddingResponse": {
        "type": "object",
        "properties": {
          "embedding": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "Generated embedding vector, typically an array of floating-point numbers"
          },
          "dimensions": {
            "type": "integer",
            "description": "Dimensions of the embedding vector"
          }
        }
      },
      "CompletionRequest": {
        "type": "object",
        "required": ["prompt"],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Text prompt to be completed",
            "example": "Please explain what a vector database is and its main advantages"
          },
          "use_context": {
            "type": "boolean",
            "description": "Whether to use context documents to assist generation",
            "default": false
          },
          "context_query": {
            "type": "string",
            "description": "Query text for retrieving context, only effective when use_context is true",
            "example": "vector database advantages features"
          },
          "max_context_docs": {
            "type": "integer",
            "description": "Maximum number of context documents, recommended between 1-10",
            "default": 5,
            "minimum": 1,
            "maximum": 20
          },
          "disable_cache": {
            "type": "boolean",
            "description": "Whether to disable caching for this request",
            "default": false
          },
          "model_complexity": {
            "type": "string",
            "description": "Preferred model complexity level: 'simple', 'normal', or 'complex'. Defaults to auto-detection.",
            "enum": ["simple", "normal", "complex"]
          }
        }
      },
      "CompletionResponse": {
        "type": "object",
        "properties": {
          "completion": {
            "type": "string",
            "description": "Generated completion text from Gemini model"
          },
          "debug_info": {
            "type": "object",
            "description": "Debug information, only returned when debug=true is set in the request"
          }
        }
      },
      "DocumentCreate": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "content": {
            "type": "string",
            "description": "Text content of the document, which will be converted to an embedding vector",
            "example": "Vector databases are database systems specifically designed for storing and retrieving vectors. They allow users to find semantically similar content through similarity search."
          },
          "metadata": {
            "type": "object",
            "description": "Document metadata, can contain arbitrary key-value pairs",
            "example": {"source": "technical_document.pdf", "author": "John Smith", "date": "2024-05-01"}
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID"
          },
          "title": {
            "type": "string",
            "description": "Document title"
          },
          "content": {
            "type": "string",
            "description": "Document content"
          },
          "source": {
            "type": "string",
            "description": "Document source"
          },
          "metadata": {
            "type": "object",
            "description": "Document metadata"
          },
          "chunks": {
            "type": "integer",
            "description": "Number of document chunks"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "chunking_strategy": {
            "type": "string",
            "description": "The chunking strategy used for this document",
            "enum": ["fixed_size", "intelligent"]
          }
        }
      },
      "DocumentsList": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "description": "Document list"
          },
          "total": {
            "type": "integer",
            "description": "Total number of documents"
          }
        }
      },
      "QueryRequest": {
        "type": "object",
        "required": ["query"],
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query text, for which an embedding vector will be generated",
            "example": "How does vector search work?"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results to return, default is 5, recommended between 1-20",
            "default": 5,
            "minimum": 1,
            "maximum": 20
          }
        }
      },
      "QueryResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Document ID"
                },
                "content": {
                  "type": "string",
                  "description": "Document content"
                },
                "metadata": {
                  "type": "object",
                  "description": "Document metadata"
                },
                "similarity": {
                  "type": "number",
                  "format": "float",
                  "description": "Similarity score between document and query"
                }
              }
            },
            "description": "List of query results, each containing document content, metadata, and similarity score"
          },
          "context": {
            "type": "string",
            "description": "Context text prepared for LLM, merged from result contents"
          },
          "summary": {
            "type": "string",
            "description": "Summary analysis of query results"
          }
        }
      },
      "IntegrationRequest": {
        "type": "object",
        "required": ["prompt"],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Prompt text"
          },
          "context_query": {
            "type": "string",
            "description": "Context query"
          },
          "max_context_docs": {
            "type": "integer",
            "description": "Maximum number of context documents"
          },
          "source_filter": {
            "type": "string",
            "description": "Filter documents by source"
          },
          "debug": {
            "type": "boolean",
            "description": "Whether to return debug information"
          },
          "use_chunks": {
            "type": "boolean",
            "description": "Whether to use document chunks for search",
            "default": true
          },
          "model_complexity": {
            "type": "string",
            "description": "Preferred model complexity level: 'simple', 'normal', or 'complex'. Affects which Gemini model is used and thinking budget.",
            "enum": ["simple", "normal", "complex"]
          },
          "disable_cache": {
            "type": "boolean",
            "description": "Whether to disable caching for this request",
            "default": false
          }
        }
      },
      "IntegrationResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "Generated response"
          },
          "debug_info": {
            "type": "object",
            "description": "Debug information (only returned when debug=true)"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "API status"
          }
        }
      },
      "DatabaseStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Database connection status"
          },
          "document_count": {
            "type": "integer",
            "description": "Number of documents"
          },
          "chunk_count": {
            "type": "integer",
            "description": "Number of chunks"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "Error details"
          }
        }
      },
      "UploadPdfResponse": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "string",
            "description": "Uploaded document ID"
          },
          "title": {
            "type": "string",
            "description": "Document title"
          },
          "pages": {
            "type": "integer",
            "description": "Number of PDF pages"
          },
          "chunks": {
            "type": "integer",
            "description": "Number of chunks"
          }
        }
      },
      "ClearDatabaseResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status"
          },
          "deleted_documents": {
            "type": "integer",
            "description": "Number of deleted documents"
          },
          "deleted_chunks": {
            "type": "integer",
            "description": "Number of deleted chunks"
          }
        }
      },
      "ClearAlloyDBResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status"
          },
          "deleted_tables": {
            "type": "integer",
            "description": "Number of cleared tables"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Operation time"
          }
        }
      },
      "StrategyComparisonResponse": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The original query text"
          },
          "comparison": {
            "type": "object",
            "properties": {
              "fixed_size_results": {
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer",
                    "description": "Number of results returned using fixed size strategy"
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Document"
                    },
                    "description": "Documents found using fixed size strategy"
                  },
                  "avg_similarity": {
                    "type": "number",
                    "format": "float",
                    "description": "Average similarity score for fixed size results"
                  },
                  "max_similarity": {
                    "type": "number",
                    "format": "float",
                    "description": "Maximum similarity score for fixed size results"
                  }
                }
              },
              "intelligent_results": {
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer",
                    "description": "Number of results returned using intelligent strategy"
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Document"
                    },
                    "description": "Documents found using intelligent strategy"
                  },
                  "avg_similarity": {
                    "type": "number",
                    "format": "float",
                    "description": "Average similarity score for intelligent results"
                  },
                  "max_similarity": {
                    "type": "number",
                    "format": "float",
                    "description": "Maximum similarity score for intelligent results"
                  }
                }
              },
              "evaluation": {
                "type": "string",
                "description": "Evaluation of which strategy performed better"
              }
            }
          },
          "recommended_strategy": {
            "type": "string",
            "description": "The recommended strategy based on comparison results"
          }
        }
      },
      "DualChunkingResponse": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Name of the processed file"
          },
          "file_size": {
            "type": "integer",
            "description": "Size of the file in bytes"
          },
          "text_length": {
            "type": "integer",
            "description": "Total length of extracted text"
          },
          "fixed_size_chunks": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "Number of chunks created using fixed size strategy"
              },
              "chunk_size": {
                "type": "integer",
                "description": "Size of each chunk in characters"
              },
              "overlap": {
                "type": "integer",
                "description": "Overlap size between chunks"
              },
              "doc_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of documents created with fixed size chunking"
              }
            }
          },
          "intelligent_chunks": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "Number of chunks created using intelligent strategy"
              },
              "doc_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of documents created with intelligent chunking"
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Processing status"
          }
        }
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "tags": ["System"],
        "summary": "Check API health status",
        "description": "Returns the health status of the API",
        "responses": {
          "200": {
            "description": "API is running normally",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/database-status": {
      "get": {
        "tags": ["System"],
        "summary": "Check database connection status",
        "description": "Returns the database connection status and document count",
        "responses": {
          "200": {
            "description": "Database connection is normal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Database connection error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/embedding": {
      "post": {
        "tags": ["API"],
        "summary": "Generate text embedding vector",
        "description": "Use Gemini model to generate embedding vector for text",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated embedding vector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/completion": {
      "post": {
        "tags": ["API"],
        "summary": "Generate text completion",
        "description": "Use Gemini model to generate text completion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated text completion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "post": {
        "tags": ["API"],
        "summary": "Add document",
        "description": "Add new document and generate embedding vector",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["API"],
        "summary": "Get document list",
        "description": "Get list of all documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of documents to return",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter documents by source",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved document list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsList"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}": {
      "get": {
        "tags": ["API"],
        "summary": "Get document details",
        "description": "Get detailed information of a single document",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["API"],
        "summary": "Delete document",
        "description": "Delete specified document and all its chunks",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Operation status"
                    },
                    "deleted_chunks": {
                      "type": "integer",
                      "description": "Number of deleted chunks"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "tags": ["API"],
        "summary": "Query similar documents",
        "description": "Query documents similar to input text in vector database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration": {
      "post": {
        "tags": ["API"],
        "summary": "Integration query",
        "description": "Combine vector search and Gemini model to answer questions",
        "parameters": [
          {
            "name": "source_filter",
            "in": "query",
            "description": "Filter results by document source",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Return detailed debugging information",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "force_use_documents",
            "in": "query",
            "description": "Force use document content answer even if no high similarity match found",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/upload-pdf": {
      "post": {
        "tags": ["API"],
        "summary": "Upload PDF file",
        "description": "Upload PDF file and parse its content",
        "parameters": [
          {
            "name": "use_intelligent_chunking",
            "in": "query",
            "description": "Whether to use Gemini for intelligent chunking",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "chunk_size",
            "in": "query",
            "description": "If not using intelligent chunking, fixed chunk size",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "overlap",
            "in": "query",
            "description": "If not using intelligent chunking, fixed overlap size",
            "schema": {
              "type": "integer",
              "default": 200
            }
          },
          {
            "name": "clear_existing",
            "in": "query",
            "description": "Clear documents in database before upload",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "PDF file"
                  },
                  "source": {
                    "type": "string",
                    "description": "Document source"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "JSON format metadata"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PDF upload successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadPdfResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clear-database": {
      "post": {
        "tags": ["System"],
        "summary": "Clear database",
        "description": "Clear all documents and chunks in the database",
        "parameters": [
          {
            "name": "confirmation",
            "in": "query",
            "description": "Security check parameter for operation confirmation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Database cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Confirmation parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clear-alloydb": {
      "post": {
        "tags": ["System"],
        "summary": "Clear AlloyDB",
        "description": "Clear all data tables in AlloyDB",
        "parameters": [
          {
            "name": "confirmation",
            "in": "query",
            "description": "Security check parameter for operation confirmation, must be 'confirm_clear_alloydb'",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AlloyDB cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearAlloyDBResponse"
                }
              }
            }
          },
          "400": {
            "description": "Confirmation parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Clear operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analyze-documents": {
      "post": {
        "tags": ["API"],
        "summary": "Analyze document content",
        "description": "Use Gemini to analyze document content and provide summary",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "document_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of document IDs to analyze"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["summary", "key_points", "topics"],
                    "description": "Analysis type"
                  }
                },
                "required": ["document_ids", "type"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document analysis successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Analysis result"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request parameter error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/upload-dual-chunking": {
      "post": {
        "summary": "上传使用双重分块策略的文档",
        "description": "上传PDF文档并同时使用固定尺寸分块和智能分块进行处理，方便后续比较不同策略的检索效果。注意：此端点仅支持PDF文件格式。",
        "operationId": "uploadDualChunking",
        "tags": ["Document Management"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "PDF文件（仅支持.pdf格式）"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "fixed_chunk_size",
            "in": "query",
            "description": "固定尺寸分块的块大小",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "fixed_overlap",
            "in": "query",
            "description": "固定尺寸分块的重叠大小",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "文档处理成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualChunkingResponse"
                }
              }
            }
          },
          "400": {
            "description": "请求参数无效或文件类型不支持",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "服务器内部错误",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compare-strategies": {
      "post": {
        "summary": "比较不同分块策略的检索效果",
        "description": "对同一个查询使用不同的分块策略进行检索，并对比结果",
        "operationId": "compareSearchStrategies",
        "tags": ["Document Retrieval"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "source_filter",
            "in": "query",
            "description": "按文档来源筛选结果",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "document1.pdf"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "每种策略返回的最大结果数",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "策略比较结果",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyComparisonResponse"
                }
              }
            }
          },
          "400": {
            "description": "请求参数无效",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "服务器内部错误",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
} 